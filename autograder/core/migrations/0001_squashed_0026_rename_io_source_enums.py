# Generated by Django 2.0.1 on 2018-04-26 05:31

import autograder.core.constants
import autograder.core.fields
import autograder.core.models.ag_model_base
import autograder.core.models.ag_test.ag_test_case
import autograder.core.models.ag_test.ag_test_command
import autograder.core.models.ag_test.ag_test_suite
import autograder.core.models.project.download_task
import autograder.core.models.project.instructor_file
import autograder.core.models.project.project
import autograder.core.models.student_test_suite.student_test_suite
import autograder.core.models.student_test_suite.student_test_suite_result
import autograder.core.utils
import datetime
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import timezone_field.fields


class Migration(migrations.Migration):

    replaces = [('core', '0001_squashed_0014_auto_20170825_1709'), ('core', '0002_downloadtask'), ('core', '0003_remove_agtestsuite_docker_image_to_use'), ('core', '0004_agtestsuite_docker_image_to_use'), ('core', '0005_auto_20171013_2018'), ('core', '0006_auto_20171013_2155'), ('core', '0007_auto_20171014_0302'), ('core', '0008_auto_20171015_1944'), ('core', '0009_auto_20171016_0216'), ('core', '0010_auto_20171016_0408'), ('core', '0011_auto_20171016_0422'), ('core', '0012_rerunsubmissionstask'), ('core', '0013_auto_20171203_2331'), ('core', '0014_auto_20171204_0015'), ('core', '0015_auto_20171222_2257'), ('core', '0016_django_2-0'), ('core', '0017_submissiongroup__member_names'), ('core', '0018_store_member_names'), ('core', '0019_order_member_names'), ('core', '0020_course_handgraders'), ('core', '0021_rename_staff_and_admin_fields'), ('core', '0022_rename_uploaded_file_model'), ('core', '0023_rename_expected_student_model'), ('core', '0024_instructor_file_related_fields_rename'), ('core', '0025_remove_stdin_from_ag_command'), ('core', '0026_rename_io_source_enums')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AGCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(blank=True, help_text='An optional name for this command.', max_length=255, strip=False)),
                ('cmd', models.CharField(help_text='A string containing the command to be run.\n                     Note: This string will be inserted into [\'bash\', \'-c\', <cmd>]\n                        in order to be executed.\n                     Note: This string defaults to the "true" command\n                     (which does nothing and returns 0) so that AGCommands are\n                     default-creatable.', max_length=1000)),
                ('time_limit', models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            command.\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(260)])),
                ('stack_size_limit', models.IntegerField(default=10000000, help_text='\n        stack_size_limit -- The maximum stack size in bytes.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_STACK_SIZE_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)])),
                ('virtual_memory_limit', models.BigIntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4000000000)])),
                ('process_spawn_limit', models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGCommandResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('return_code', models.IntegerField(blank=True, default=None, help_text='"The return code of the completed command. A value of None\n                      for a completed usually is caused by the the command timing out.', null=True)),
                ('timed_out', models.BooleanField(default=False, help_text='Whether the command exceeded its time limit.')),
                ('stdout_truncated', models.BooleanField(default=False, help_text="Whether the command's stdout was truncated.")),
                ('stderr_truncated', models.BooleanField(default=False, help_text="Whether the command's stderr was truncated.")),
                ('_stdout_filename', models.TextField(blank=True)),
                ('_stderr_filename', models.TextField(blank=True)),
                ('ag_command', models.ForeignKey(blank=True, default=None, help_text="The AGCommand this result belongs to, or None if this result doesn't belong to a command or if its command has been deleted.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.AGCommand')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this autograder test.\n                     Must be non-empty and non-null.\n                     Must be unique among autograder tests that belong to the same suite.\n                     This field is REQUIRED.', max_length=255, strip=False)),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCaseFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_individual_commands', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCaseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('ag_test_case', models.ForeignKey(help_text='The AGTestCase that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='related_ag_test_case_results', to='core.AGTestCase')),
            ],
            options={
                'ordering': ('ag_test_case___order',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('cmd', models.CharField(help_text='A string containing the command to be run.\n                     Note: This string will be inserted into [\'bash\', \'-c\', <cmd>]\n                        in order to be executed.\n                     Note: This string defaults to the "true" command\n                     (which does nothing and returns 0) so that AGCommands are\n                     default-creatable.', max_length=1000)),
                ('time_limit', models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            command.\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(260)])),
                ('stack_size_limit', models.IntegerField(default=10000000, help_text='\n        stack_size_limit -- The maximum stack size in bytes.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_STACK_SIZE_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)])),
                ('virtual_memory_limit', models.BigIntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4000000000)])),
                ('process_spawn_limit', models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)])),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this command.\n                         Must be non-empty and non-null.\n                         Must be unique among commands that belong to the same autograder test.\n                         This field is REQUIRED.', max_length=255, strip=False)),
                ('stdin_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.StdinSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.StdinSource, help_text='Specifies what kind of source stdin will be redirected from.')),
                ('stdin_text', models.TextField(blank=True, help_text='A string whose contents should be redirected to the stdin of this command.\n                     This value is used when stdin_source is StdinSource.text and is ignored\n                     otherwise.')),
                ('expected_return_code', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedReturnCode('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedReturnCode, help_text="Specifies the command's expected return code.")),
                ('expected_stdout_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource, help_text="Specifies what kind of source this command's stdout should be compared to.")),
                ('expected_stdout_text', models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stdout.\n                     This value is used when expected_stdout_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)])),
                ('expected_stderr_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource, help_text="Specifies what kind of source this command's stderr should be compared to.")),
                ('expected_stderr_text', models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stderr.\n                     This value is used when expected_stderr_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)])),
                ('ignore_case', models.BooleanField(default=False, help_text='Ignore case when checking output. Equivalent to diff -i')),
                ('ignore_whitespace', models.BooleanField(default=False, help_text='Ignore inline whitespace when checking output. Equivalent to diff -w')),
                ('ignore_whitespace_changes', models.BooleanField(default=False, help_text='Ignore whitespace changes when checking output. Equivalent to diff -b')),
                ('ignore_blank_lines', models.BooleanField(default=False, help_text='Ignore changes in blank lines when checking output. Equivalent to diff -B')),
                ('points_for_correct_return_code', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct return_code', validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_correct_stdout', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct stdout', validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_correct_stderr', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct stderr', validators=[django.core.validators.MinValueValidator(0)])),
                ('deduction_for_wrong_return_code', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong return code (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('deduction_for_wrong_stdout', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong stdout (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('deduction_for_wrong_stderr', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong stderr (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('ag_test_case', models.ForeignKey(help_text='The AGTestCase that this command belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_commands', to='core.AGTestCase')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommandFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('return_code_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('stdout_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('stderr_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('show_points', models.BooleanField(default=False)),
                ('show_actual_return_code', models.BooleanField(default=False)),
                ('show_actual_stdout', models.BooleanField(default=False)),
                ('show_actual_stderr', models.BooleanField(default=False)),
                ('show_whether_timed_out', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommandResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('return_code', models.IntegerField(blank=True, default=None, help_text='"The return code of the completed command. A value of None\n                      for a completed usually is caused by the the command timing out.', null=True)),
                ('timed_out', models.BooleanField(default=False, help_text='Whether the command exceeded its time limit.')),
                ('stdout_truncated', models.BooleanField(default=False, help_text="Whether the command's stdout was truncated.")),
                ('stderr_truncated', models.BooleanField(default=False, help_text="Whether the command's stderr was truncated.")),
                ('return_code_correct', models.NullBooleanField(default=None)),
                ('stdout_correct', models.NullBooleanField(default=None)),
                ('stderr_correct', models.NullBooleanField(default=None)),
                ('ag_test_case_result', models.ForeignKey(help_text="The AGTestCaseResult that this result belongs to.\n                     A value of None indicates that this AGTestCommandResult\n                     is the result of an AGTestSuite's setup command.", on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_command_results', to='core.AGTestCaseResult')),
                ('ag_test_command', models.ForeignKey(help_text='The AGTestCommand this result belongs to.', on_delete=django.db.models.deletion.CASCADE, to='core.AGTestCommand')),
            ],
            options={
                'ordering': ('ag_test_command___order',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this suite.\n                     Must be non-empty and non-null.\n                     Must be unique among suites that belong to the same project.\n                     This field is REQUIRED.', max_length=255, strip=False)),
                ('read_only_instructor_files', models.BooleanField(default=True, help_text='When True, project files needed for this suite will be read-only when this\n                     suite is run.')),
                ('setup_suite_cmd', models.CharField(blank=True, help_text="A command to be run before this suite's tests are run.\n                     This command is only run once at the beginning of the suite.\n                     This command will be run after the student and project files\n                     have been added to the sandbox.", max_length=1000)),
                ('teardown_suite_cmd', models.CharField(blank=True, help_text="A command to be run after this suite's tests are run.\n                     This command is only run once at the end of the suite.", max_length=1000)),
                ('setup_suite_cmd_name', autograder.core.fields.ShortStringField(blank=True, help_text="The name of this suite's setup command.", max_length=255, strip=False)),
                ('teardown_suite_cmd_name', autograder.core.fields.ShortStringField(blank=True, help_text="The name of this suite's teardown command.", max_length=255, strip=False)),
                ('docker_image_to_use', autograder.core.fields.EnumField(default=autograder.core.constants.SupportedImages('default'), enum_type=autograder.core.constants.SupportedImages, help_text='An identifier for the Docker image that the sandbox should be created from.')),
                ('allow_network_access', models.BooleanField(default=False, help_text='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.')),
                ('deferred', models.BooleanField(default=False, help_text='If true, this test suite can be graded asynchronously. Deferred suites that\n                     have yet to be graded do not prevent members of a group from submitting\n                     again.')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuiteFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_individual_tests', models.BooleanField(default=True, help_text='Whether to show information about individual tests in a suite or just a\n                     points summary (if available).')),
                ('show_setup_and_teardown_return_code', models.BooleanField(default=True)),
                ('show_setup_and_teardown_timed_out', models.BooleanField(default=True)),
                ('show_setup_and_teardown_stdout', models.BooleanField(default=True, help_text="Whether to show stdout content from a suite's setup and teardown commands.")),
                ('show_setup_and_teardown_stderr', models.BooleanField(default=True, help_text="Whether to show stderr content from a suite's setup and teardown commands.")),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuiteResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('setup_return_code', models.IntegerField(blank=True, default=None, help_text="The return code of this suite's setup command.", null=True)),
                ('setup_timed_out', models.BooleanField(default=False, help_text="Whether this suite's setup command took too long to run.")),
                ('setup_stdout', models.TextField(blank=True, help_text="The stdout content of this suite's setup command.")),
                ('setup_stderr', models.TextField(blank=True, help_text="The stderr content of this suite's setup command.")),
                ('setup_stdout_truncated', models.BooleanField(default=False, help_text="Whether the setup command's stdout was truncated")),
                ('setup_stderr_truncated', models.BooleanField(default=False, help_text="Whether the setup command's stderr was truncated")),
                ('teardown_return_code', models.IntegerField(blank=True, default=None, help_text="The return code of this suite's teardown command.", null=True)),
                ('teardown_timed_out', models.BooleanField(default=False, help_text="Whether this suite's teardown command took too long to run.")),
                ('teardown_stdout', models.TextField(blank=True, help_text="The stdout content of this suite's teardown command.")),
                ('teardown_stderr', models.TextField(blank=True, help_text="The stderr content of this suite's teardown command.")),
                ('teardown_stdout_truncated', models.BooleanField(default=False, help_text="Whether the teardown command's stdout was truncated")),
                ('teardown_stderr_truncated', models.BooleanField(default=False, help_text="Whether the teardown command's stderr was truncated")),
                ('ag_test_suite', models.ForeignKey(help_text='The AGTestSuite that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, to='core.AGTestSuite')),
            ],
            options={
                'ordering': ('ag_test_suite___order',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name of this course.\n                  Must be unique, non-empty and non-null.', max_length=255, strip=False, unique=True, validators=[django.core.validators.MinLengthValidator(1)])),
                ('admins', models.ManyToManyField(help_text='The Users that are admins for\n                  this Course. admins have edit access\n                  to this Course.', related_name='courses_is_admin_for', to=settings.AUTH_USER_MODEL)),
                ('handgraders', models.ManyToManyField(help_text='Users that are handgraders for this Course.\n            Handgraders can view best submissions from students\n            and edit the Handgrading Result', related_name='courses_is_handgrader_for', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ManyToManyField(help_text='Users that are staff members for this Course.\n            Staff members receive full feedback on autograder test\n            cases and can view student submissions.', related_name='courses_is_staff_for', to=settings.AUTH_USER_MODEL)),
                ('students', models.ManyToManyField(help_text='Users that are enrolled in this Course.\n                  Enrolled students can view all visible Projects\n                  associated with this Course and may be in\n                  SubmissionGroups together.', related_name='courses_is_enrolled_in', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DownloadTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('progress', models.IntegerField(default=0, help_text='A percentage indicating how close the task is to completion.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('error_msg', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('download_type', autograder.core.fields.EnumField(enum_type=autograder.core.models.project.download_task.DownloadType)),
                ('result_filename', models.TextField(blank=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExpectedStudentFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('pattern', autograder.core.fields.ShortStringField(help_text="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.5/library/fnmatch.html)\n            This string must be a legal UNIX filename and may not be\n            '..' or '.'.\n            NOTE: Patterns for a given project must not overlap,\n                otherwise the behavior is undefined.", max_length=255, strip=False, validators=[autograder.core.utils.check_filename])),
                ('min_num_matches', models.IntegerField(default=1, help_text='The minimum number of submitted student files that\n            should match the pattern. Must be non-negative.', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_num_matches', models.IntegerField(default=1, help_text='The maximum number of submitted student files that\n            can match the pattern. Must be >= min_num_matches')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InstructorFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('file_obj', models.FileField(max_length=510, upload_to=autograder.core.models.project.instructor_file._get_project_file_upload_to_path, validators=[autograder.core.models.project.instructor_file._validate_filename])),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(max_length=500)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this project.\n            Must be non-empty and non-null.\n            Must be unique among Projects associated with\n            a given course.\n            This field is REQUIRED.', max_length=255, strip=False)),
                ('visible_to_students', models.BooleanField(default=False, help_text='Whether information about this Project can\n            be viewed by students.')),
                ('closing_time', models.DateTimeField(blank=True, default=None, help_text='The date and time that this project should stop\n            accepting submissions.\n            A value of None indicates that this project should\n            stay open.', null=True)),
                ('soft_closing_time', models.DateTimeField(blank=True, default=None, help_text='The date and time that should be displayed as the\n            due date for this project. Unlike closing_time,\n            soft_closing_time does not affect whether submissions are\n            actually accepted.\n            If not None and closing_time is not None, this value must be\n            less than (before) closing_time.', null=True)),
                ('disallow_student_submissions', models.BooleanField(default=False, help_text='A hard override that indicates that students should\n            be prevented from submitting even if visible_to_students is\n            True and it is before closing_time.')),
                ('disallow_group_registration', models.BooleanField(default=False, help_text='A hard override that indicates that students should\n            not be able to send, accept, or reject group\n            invitations.')),
                ('guests_can_submit', models.BooleanField(default=False, help_text='By default, only admins, staff, and students\n            for a given Course can view and submit to its Projects.\n            When True, submissions will be accepted from guests\n            with the following caveats:\n                - Guests must be given a direct link to the project.\n                - When group work is allowed, guests can\n                only be in groups with other guests.')),
                ('min_group_size', models.IntegerField(default=1, help_text='The minimum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be <= max_group_size.', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_group_size', models.IntegerField(default=1, help_text='The maximum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be >= min_group_size.', validators=[django.core.validators.MinValueValidator(1)])),
                ('submission_limit_per_day', models.IntegerField(blank=True, default=None, help_text='The number of submissions each group is allowed per\n            day before either reducing feedback or preventing further\n            submissions. A value of None indicates no limit.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('allow_submissions_past_limit', models.BooleanField(default=True, help_text='Whether to allow additional submissions after a\n            group has submitted submission_limit_per_day times.')),
                ('submission_limit_reset_time', models.TimeField(default=datetime.time, help_text='The time that marks the beginning and end of the 24\n            hour period during which submissions should be counted\n            towards the daily limit. Defaults to 0:0:0.')),
                ('submission_limit_reset_timezone', timezone_field.fields.TimeZoneField(default='UTC', help_text='The timezone to use when computing how many\n            submissions a group has made in a 24 hour period.')),
                ('ultimate_submission_policy', autograder.core.fields.EnumField(blank=True, default=autograder.core.models.project.project.UltimateSubmissionPolicy('most_recent'), enum_type=autograder.core.models.project.project.UltimateSubmissionPolicy, help_text='The "ultimate" submission for a group is the one\n            that will be used for final grading. This field specifies\n            how the ultimate submission should be determined.')),
                ('hide_ultimate_submission_fdbk', models.BooleanField(default=True, help_text='A hard override that indicates that ultimate\n            submission feedback should not be shown, even if the\n            appropriate criteria are met.')),
                ('course', models.ForeignKey(help_text='The Course this project belongs to.\n            This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.Course')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RerunSubmissionsTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('error_msg', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rerun_all_submissions', models.BooleanField(default=True, help_text='When True, indicates that all submissions for the specified\n                     project should be rerun. Otherwise, only the submissions\n                     whose primary keys are listed in submission_pks should be rerun.')),
                ('submission_pks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='When rerun_all_submissions is False, specifies which submissions\n                     should be rerun.', size=None)),
                ('rerun_all_ag_test_suites', models.BooleanField(default=True, help_text='When True, indicates that all AGTestSuites belonging\n                     to the specified project should be rerun. Otherwise,\n                     only the AGTestSuites specified in ag_test_suite_data should\n                     be rerun.')),
                ('ag_test_suite_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='When rerun_all_ag_test_suites is False, specifies which\n                     AGTestSuites should be rerun and which AGTestCases within\n                     those suites should be rerun.\n        Data format:\n        {\n            // Note: JSON format requires that keys are strings. Postgres\n            // doesn\'t seem to care, but some JSON serializers might.\n            "<ag_test_suite_pk>": [<ag_test_case_pk>, ...],\n            ...\n        }\n        If an ag_test_suite_pk is mapped to an empty list, then all ag test cases\n        belonging to that ag test suite will be rerun.')),
                ('rerun_all_student_test_suites', models.BooleanField(default=True, help_text='When True, indicates that all StudentTestSuites belonging\n                     to the specified project should be rerun. Otherwise,\n                     only the StudentTestSuites specified in student_test_suite_pks\n                     should be rerun.')),
                ('student_suite_pks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, default=list, help_text='When rerun_all_student_test_suites is False, specifies which\n                     student test suites should be rerun.', size=None)),
                ('num_completed_subtasks', models.IntegerField(default=0)),
                ('celery_group_result_id', models.UUIDField(blank=True, default=None, null=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='The Project this task belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='rerun_submission_tasks', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this StudentTestSuite.\n                     Must be non-empty and non-null.', max_length=255, strip=False)),
                ('read_only_instructor_files', models.BooleanField(default=True, help_text='When True, project files needed for this suite will be read-only when this\n                     suite is graded.')),
                ('buggy_impl_names', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of buggy implementations that student tests should be run against.', max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('use_setup_command', models.BooleanField(default=False)),
                ('max_num_student_tests', models.IntegerField(default=25, help_text='The maximum number of test cases students are allowed to submit.\n                     If more than this many tests are discovered by the\n                     get_student_test_names_command, test names will be discarded\n                     from the end of that list.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('points_per_exposed_bug', models.IntegerField(default=0, help_text='The number of points to be awarded per buggy implementation exposed by\n                     the student test cases.', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_points', models.IntegerField(blank=True, default=None, help_text='An optional ceiling on the number of points to be awarded.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('deferred', models.BooleanField(default=False, help_text='If true, this student test suite can be graded asynchronously.\n                     Deferred suites that have yet to be graded do not prevent members\n                     of a group from submitting again.')),
                ('docker_image_to_use', autograder.core.fields.EnumField(default=autograder.core.constants.SupportedImages('default'), enum_type=autograder.core.constants.SupportedImages, help_text='An identifier for the Docker image that the sandbox should be created from.')),
                ('allow_network_access', models.BooleanField(default=False, help_text='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.')),
                ('get_student_test_names_command', models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_get_student_test_names_cmd, help_text="This required command should print out a whitespace-separated\n                     list of detected student names. The output of this command will\n                     be parsed using Python's str.split().\n                     NOTE: This AGCommand's 'cmd' field must not be blank.", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand')),
                ('grade_buggy_impl_command', models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_grade_buggy_impl_command, help_text="This command will be run once for every (buggy implementation, valid test)\n                    pair.\n                     A nonzero exit status indicates that the valid student tests exposed the\n                     buggy impl, whereas an exit status of zero indicates that the student\n                     tests did not expose the buggy impl.\n                     This command must contain the placeholders ${student_test_name} and ${buggy_impl_name}. The placeholder\n                     ${student_test_name} will be replaced with the name of a valid student test case.\n                     The placeholder ${buggy_impl_name} will be replaced with the name of\n                     the buggy impl that the student test is being run against.\n                     NOTE: This AGCommand's 'cmd' field must not be blank.\n                     ", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand')),
                ('instructor_files_needed', models.ManyToManyField(help_text='The project files that will be copied into the sandbox before the suite\n                     is graded.', to='core.InstructorFile')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuiteFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_setup_return_code', models.BooleanField(default=True, help_text='"Whether to show the return code from the setup command\n                      and whether the command timed out.')),
                ('show_setup_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from the setup command.')),
                ('show_setup_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from the setup command')),
                ('show_get_test_names_return_code', models.BooleanField(default=True, help_text='"Whether to show the return code from the get_test_names command\n                      and whether the command timed out.')),
                ('show_get_test_names_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from the get_test_names command.')),
                ('show_get_test_names_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from the get_test_names command')),
                ('show_validity_check_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from all runs of the setup command.')),
                ('show_validity_check_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from all runs of the setup command.')),
                ('show_grade_buggy_impls_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from grading all buggy impls.')),
                ('show_grade_buggy_impls_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from grading all buggy impls.')),
                ('show_invalid_test_names', models.BooleanField(default=True, help_text="Whether to show the names of student tests that failed the validity check.\n                     Setting this to true will also include information about whether\n                     invalid test cases exceeded the validity check command's time limit.")),
                ('show_points', models.BooleanField(default=False, help_text='Whether to show how many points were awarded.')),
                ('bugs_exposed_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.student_test_suite.student_test_suite.BugsExposedFeedbackLevel('no_feedback'), enum_type=autograder.core.models.student_test_suite.student_test_suite.BugsExposedFeedbackLevel)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuiteResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('student_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of discovered student test cases.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('discarded_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='"The names of student tests that were discarded due\n                      to too many tests being discovered.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('invalid_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of student test cases that failed the validity check.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('timed_out_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of student test cases that timed out during the validity check.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('bugs_exposed', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text="The names of instructor buggy implementations that were exposed\n                     by the student's test cases.", max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('get_test_names_result', models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite_result._make_get_test_names_result_default, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommandResult')),
                ('setup_result', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommandResult')),
                ('student_test_suite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StudentTestSuite')),
            ],
            options={
                'ordering': ('student_test_suite___order',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('submitter', autograder.core.fields.ShortStringField(blank=True, help_text='The name of the user who made this submission', max_length=255, strip=False)),
                ('submitted_filenames', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of submitted_files.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('discarded_files', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='A list of names of files that were discarded when\n            this Submission was created.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('missing_files', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Stores missing filenames and the additional number\n            of files needed to satisfy a file pattern requirement.\n            Stored as key-value pairs of the form:\n            {pattern: num_additional_needed}')),
                ('status', models.CharField(choices=[('received', 'received'), ('queued', 'queued'), ('being_graded', 'being_graded'), ('waiting_for_deferred', 'waiting_for_deferred'), ('finished_grading', 'finished_grading'), ('removed_from_queue', 'removed_from_queue'), ('error', 'error')], default='received', help_text='The grading status of this submission see\n            Submission.GradingStatus for details on allowed values.', max_length=255)),
                ('count_towards_daily_limit', models.BooleanField(default=True, help_text='Indicates whether this submission should count\n            towards the daily submission limit.')),
                ('is_past_daily_limit', models.NullBooleanField(default=None, help_text='Whether this submission is past the daily submission limit.\n                     This field is currently nullable for easier integration.')),
                ('error_msg', models.TextField(blank=True, help_text='If status is "error", an error message will be stored here.')),
            ],
            options={
                'ordering': ['-pk'],
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubmissionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('_member_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=150), default=list, help_text='A list of usernames of the group members, sorted alphabetically.\n                     This field is updated automatically when self.members is updated\n                     through self.validate_and_update', size=None)),
                ('extended_due_date', models.DateTimeField(blank=True, default=None, help_text='When this field is set, it indicates that members\n            of this submission group can submit until this specified\n            date, overriding the project closing time.\n            Default value: None', null=True)),
                ('members', models.ManyToManyField(help_text='The Users that belong to this submission group.\n            This list must contain at least one member and no more than\n            project.max_group_size members. A User can only be a member\n            of one submission group per project.\n            This field is REQUIRED.', related_name='groups_is_member_of', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_groups', to='core.Project')),
            ],
            options={
                'ordering': ('_member_names',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubmissionGroupInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('_invitees_who_accepted', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('invitation_creator', models.ForeignKey(help_text='The User who created this invitation.\n            This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='group_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('invited_users', models.ManyToManyField(help_text='The Users that the invitation_creator has invited\n            to form a submission group together.\n            This field is REQUIRED.\n            This field may not be empty.', related_name='group_invitations_received', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_group_invitations', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.AddField(
            model_name='submission',
            name='submission_group',
            field=models.ForeignKey(help_text='\n            The SubmissionGroup that this submission belongs to. Note\n            that this field indirectly links this Submission object to a\n            Project.\n            This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core.SubmissionGroup'),
        ),
        migrations.AddField(
            model_name='studenttestsuiteresult',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_test_suite_results', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_past_limit_student_suite_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='project',
            field=models.ForeignKey(help_text='The Project that this student test suite belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='student_test_suites', to='core.Project'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='setup_command',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_setup_cmd, help_text="A command to be run after student and project files have\n                     been added to the sandbox but before any other commands are run.\n                     The AGCommand's 'cmd' field must not be blank. To indicate that no\n                     setup command should be run, set use_setup_command to False.", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_max_student_suite_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='student_files_needed',
            field=models.ManyToManyField(help_text='Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite is graded.', to='core.ExpectedStudentFile'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='student_test_validity_check_command',
            field=models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_validity_check_command, help_text="This command will be run once for each detected student test case.\n                     An exit status of zero indicates that a student test case is valid,\n                     whereas a nonzero exit status indicates that a student test case\n                     is invalid.\n                     This command must contain the placeholder ${student_test_name} at least once. That\n                     placeholder will be replaced with the name of the student test case\n                     that is to be checked for validity.\n                     NOTE: This AGCommand's 'cmd' field must not be blank.\n                     ", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='instructorfile',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_files', to='core.Project'),
        ),
        migrations.AddField(
            model_name='expectedstudentfile',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expected_student_files', to='core.Project'),
        ),
        migrations.AddField(
            model_name='downloadtask',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='download_tasks', to='core.Project'),
        ),
        migrations.AddField(
            model_name='agtestsuiteresult',
            name='submission',
            field=models.ForeignKey(help_text='The Submission that this result is for.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_suite_results', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='instructor_files_needed',
            field=models.ManyToManyField(help_text="The project files that will be copied into the sandbox before the suite's\n                     tests are run.", to='core.InstructorFile'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a normal submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='project',
            field=models.ForeignKey(help_text='The project this suite belongs to.\n                                             This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_suites', to='core.Project'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a staff member viewing a submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='student_files_needed',
            field=models.ManyToManyField(help_text="Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite's tests are run.", to='core.ExpectedStudentFile'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for an ultimate submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='expected_stderr_instructor_file',
            field=models.ForeignKey(blank=True, default=None, help_text="An InstructorFile whose contents should be compared against this command's\n                     stderr. This value is used (and may not be null) when expected_stderr_source\n                     is ExpectedOutputSource.instructor_file and is ignored otherwise.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.InstructorFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='expected_stdout_instructor_file',
            field=models.ForeignKey(blank=True, default=None, help_text="An InstructorFile whose contents should be compared against this command's\n                     stdout. This value is used (and may not be null) when expected_stdout_source\n                     is ExpectedOutputSource.instructor_file and is ignored otherwise.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.InstructorFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_max_command_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='stdin_instructor_file',
            field=models.ForeignKey(blank=True, default=None, help_text='An InstructorFile whose contents should be redirected to the stdin of this\n                     command. This value is used when stdin_source is StdinSource.instructor_file\n                     and is ignored otherwise.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.InstructorFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcaseresult',
            name='ag_test_suite_result',
            field=models.ForeignKey(help_text='The AGTestSuiteResult that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_case_results', to='core.AGTestSuiteResult'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='ag_test_suite',
            field=models.ForeignKey(help_text='The suite this autograder test belongs to.\n                     This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_cases', to='core.AGTestSuite'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='studenttestsuiteresult',
            unique_together={('student_test_suite', 'submission')},
        ),
        migrations.AlterUniqueTogether(
            name='studenttestsuite',
            unique_together={('name', 'project')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='studenttestsuite',
            order_with_respect_to='project',
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('name', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='expectedstudentfile',
            unique_together={('pattern', 'project')},
        ),
        migrations.AlterUniqueTogether(
            name='agtestsuiteresult',
            unique_together={('ag_test_suite', 'submission')},
        ),
        migrations.AlterUniqueTogether(
            name='agtestsuite',
            unique_together={('name', 'project')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestsuite',
            order_with_respect_to='project',
        ),
        migrations.AlterUniqueTogether(
            name='agtestcommandresult',
            unique_together={('ag_test_command', 'ag_test_case_result')},
        ),
        migrations.AlterUniqueTogether(
            name='agtestcommand',
            unique_together={('name', 'ag_test_case')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestcommand',
            order_with_respect_to='ag_test_case',
        ),
        migrations.AlterUniqueTogether(
            name='agtestcaseresult',
            unique_together={('ag_test_case', 'ag_test_suite_result')},
        ),
        migrations.AlterUniqueTogether(
            name='agtestcase',
            unique_together={('name', 'ag_test_suite')},
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestcase',
            order_with_respect_to='ag_test_suite',
        ),
    ]
